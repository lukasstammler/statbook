)
mod.homo   = lm(y_homo~x)
mod.hetero = lm(y_hetero~x)
mod.homo.aug <- augment(mod.homo)
resplot3 <- ggplot(mod.homo.aug, aes(x = .fitted, y = .std.resid)) +
geom_point(color = COL[1], size = 3, alpha = .7) +
geom_hline(yintercept = 0, color = "red") +
theme_minimal()+
xlab("(c)")
(resplot1 | resplot2)/
(resplot3 | resplot4)
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
library(openintro)
library(tidyverse)
library(knitr)
library(patchwork)
library(kableExtra)
ggred <- "#F8766D"
ggblue <- "#00BFC4"
ggreen <- "#7CAE00"
ggviolet <- "#C77CFF"
data(COL)
library(scales)
show_col(COL[1:20])
#openintro_palettes # Hex for openintro COLs
# Probleme beim rendern: https://stackoverflow.com/questions/66305776/got-knit-issue-with-r, solution:
# tinytex::tlmgr_install("pdfcrop")
# install ghostscript https://www.ghostscript.com/download/gsdnld.html
# Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.54.0/bin/gswin64.exe")
phy <- read_csv("./data/02_phy.csv", show_col_types = FALSE)
head(phy, 5) %>%
kable(caption = "Daten der ersten 5 Studierenden im Datensatz phy.csv (n = 228)") %>%
kable_classic(full_width = FALSE)
# https://www.bfs.admin.ch/bfs/de/home/statistiken/arbeit-erwerb/loehne-erwerbseinkommen-arbeitskosten/lohnniveau-schweiz/verteilung-nettoloehne.html
income <- read_csv("./data/02_income_ch_f_2018.csv")
# für jedes Lohnband gemäss Prozentangaben Daten erstellen
code <- income$code
prozent <- income$prozent
income <- vector()
for (i in 1:21){
inc <- code[i]
mal <- prozent[i] * 10
x <- rep(inc, times = mal)
income <- c(income, x)
}
einkommen <- tibble(Einkommen = income)
# Mittelwert und Median berechnen
sum <- einkommen %>%
summarise(
M = mean(Einkommen),
Median = median(Einkommen)
)
sum <- round(sum, 1)
# Histogramm erstellen
ggplot(einkommen, aes(x = Einkommen)) +
geom_histogram(fill = COL[1], color = "white", binwidth = 1) +
xlab("CHF (in Tausend)") +
ylab("Häufigkeit") +
geom_vline(xintercept = sum$M, color = COL[4], lwd = 1) +
geom_vline(xintercept = sum$Median, color = COL[2], lwd = 1) +
ggtitle("Monatliches Einkommen Frauen CH, 2018",
subtitle = paste("Mittelwert (rot) = CHF", sum$M * 1000, ", Median (grün) = CHF", sum$Median * 1000))
phy <- read_csv("./data/02_phy_w.csv", show_col_types = FALSE)
# phy_w <- phy %>%
#   filter(Geschlecht == "w")
# write_csv(phy_w, file = "./data/phy_w.csv")
p1 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 1) +
xlab("(A) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p2 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 2) +
xlab("(B) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p3 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 5) +
xlab("(C) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p4 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 10) +
xlab("(D) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
(p1 | p2)/
(p3 | p4)
phy_w <- read_csv("./data/02_phy_w.csv", show_col_types = FALSE)
# phy_w <- phy %>%
#   filter(Geschlecht == "w")
# write_csv(phy_w, file = "./data/phy_w.csv")
p1 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 1) +
xlab("(A) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p2 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 2) +
xlab("(B) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p3 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 5) +
xlab("(C) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
p4 <- ggplot(phy_w, aes(x = Groesse)) +
geom_histogram(color = "white", fill = COL[1], binwidth = 10) +
xlab("(D) Grösse (cm)") +
ylab("Anzahl") +
theme_bw()
(p1 | p2)/
(p3 | p4)
set.seed(2)
data <- tibble(
set = c(rep("SP1", 20), rep("SP2", 20)),
x = c(rnorm(20, mean = 0, sd = 0.2), rnorm(20, mean = 0, sd = 1)),
y = c(rep(1, 20), rep(2, 20))
)
ggplot(data, aes(x = x, y = y, color = set)) +
geom_point(size = 3, alpha = .6) +
theme_minimal() +
ylim(0, 3) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
geom_vline(xintercept = 0)
data %>%
group_by(set) %>%
summarise(
M = mean(x),
s = sd(x)
)
publish_book(render = "local")
bookdown::publish_book(render = "local")
install.packages(c("backports", "gld"))
rsconnect::servers()
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center",
fig.dim = c(5,4))
library(openintro)
library(tidyverse)
library(knitr)
library(patchwork)
library(Hmisc)       # for errorbars in ggplot
library(kableExtra)
library(graphics)
ggred <- "#F8766D"
ggblue <- "#00BFC4"
ggreen <- "#7CAE00"
ggviolet <- "#C77CFF"
library(scales)
show_col(COL[1:20])
gr1 <- tibble(
gruppe = rep("Gruppe_1", times = 17),
eltern = rep(0, times = 17),
kind = rep(0, times = 17)
)
gr2 <- tibble(
gruppe = rep("Gruppe_2", times = 5),
eltern = rep(1, times = 5),
kind = rep(0, times = 5)
)
gr3 <- tibble(
gruppe = rep("Gruppe_3", times = 7),
eltern = rep(0, times = 7),
kind = rep(1, times = 7)
)
gr4 <- tibble(
gruppe = rep("Gruppe_4", times = 9),
eltern = rep(1, times = 9),
kind = rep(1, times = 9)
)
parsifal <- bind_rows(gr1, gr2, gr3, gr4)
# write_csv(parsifal, file = "C:/Users/balbu/switchdrive/R/Github/STAT/Datasets/parsifal.csv")
jmv::contTables(
formula = ~kind:eltern,
data = parsifal,
exp = FALSE,
pcTot = TRUE,
chiSq = FALSE,
)
jmv::contTables(
formula = ~kind:eltern,
data = parsifal,
exp = TRUE,
chiSq = FALSE,
)
# descr::CrossTable(parsifal$kind, parsifal$eltern, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE,
#            prop.chisq = FALSE, expected = TRUE)
100000/12
data("student_sleep")
# write_csv(student_sleep, file = "./data/04_student_sleep.csv")
student_sleep %>%
summarise(
n = n(),
M = mean(hours),
s = sd(hours),
median = median(hours)
) %>%
kbl(digits = 2, caption = "Kennzahlen zur Schlafdauer (h)") %>%
kable_classic(full_width = FALSE)
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center",
fig.dim = c(5,4))
library(openintro)
library(tidyverse)
library(knitr)
library(patchwork)
library(Hmisc)       # for errorbars in ggplot
library(kableExtra)
library(graphics)
ggred <- "#F8766D"
ggblue <- "#00BFC4"
ggreen <- "#7CAE00"
ggviolet <- "#C77CFF"
library(scales)
show_col(COL[1:20])
data("student_sleep")
# write_csv(student_sleep, file = "./data/04_student_sleep.csv")
student_sleep %>%
summarise(
n = n(),
M = mean(hours),
s = sd(hours),
median = median(hours)
) %>%
kbl(digits = 2, caption = "Kennzahlen zur Schlafdauer (h)") %>%
kable_classic(full_width = FALSE)
### R-Code
n <- 110     # Stichprobenumfang
m <- 7.42    # Mittelwert der Stichprobe
s <- 1.75    # Standardabweichung des Mittelwerts der Stichprobe
SE <- s/sqrt(n)  # Berechnung des Standardfehlers
#SE         # not run: Ausgabe des Standardfehlers
CI95 <- round(m + c(-1, 1) * 1.96 * SE, 2)  # 95%-Vertrauensintervall berechnen
#CI95       # not run: Ausgabe des 95% Vertrauensintervalls
plot_ci_sleep <- ggplot(student_sleep, aes(x = 0, y = hours)) +
stat_summary(fun.y = mean, geom = "point", color = COL[4], size = 2) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0) +
geom_hline(yintercept = 7, col = COL[4], linetype = "dashed", size = 1) +
ylab("Stunden")+
xlab("") +
coord_flip()
plot_ci_sleep +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
CI95       # not run: Ausgabe des 95% Vertrauensintervalls
normTail(m = 0, s = 1, U = 1.64, col = COL[1], axes = 0)
yMax <- .4
label1 = expression('7.42 = '*bar(x))
label2 = expression('H0: 7 = '*mu)
axis(1, at = c(0, 2.47), labels = c(label2, label1))
axis(1, at = c(-4, 4))
points(x = 2.47, y = c(0), pch = 21, cex = 2.5, col = "black", bg = "#F05133", add = TRUE)
text(x = c(0, 2.5), y = c(0.1, 0.1), labels = c("95%", "5%"))
yMax = .4
arrows(2.4, yMax / 5, 2.2, yMax / 10,
length = 0.1, lwd = 2, col = COL[1])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
startrek <- tibble(
color = c(length(rot), length(gold), length(blue))
status = c(rot, gold, blue)
)
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
startrek <- tibble(
color = c(length(rot), length(gold), length(blue)),
status = c(rot, gold, blue)
)
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
startrek <- tibble(
color = c(rep("rot", length(rot)), rep("gold", length(gold)), rep("blue", length(blue)),
status = c(rot, gold, blue)
)
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
startrek <- tibble(
color = c(rep("rot", length(rot)), rep("gold", length(gold)), rep("blue", length(blue)),
status = c(rot, gold, blue)
)
startrek
rot <- c(rep("alive", 215), rep("dead", 24))
gold <- c(rep("alive", 46), rep("dead", 9))
blue <- c(rep("alive", 129), rep("dead", 7))
startrek <- tibble(
color = c(rep("rot", length(rot)), rep("gold", length(gold)), rep("blue", length(blue))),
status = c(rot, gold, blue)
)
chisq.test(startrek)
table(startrek)
chisq.test(table(startrek))
chisq.startrek <- chisq.test(table(startrek))
chisq.startrek
chisq.startrek <- chisq.test(table(startrek))
chisq.startrek
chisq.startrek$observed
chisq.startrek <- chisq.test(table(startrek))
chisq.startrek
chisq.startrek$expected
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center",
fig.dim = c(5, 4))
library(openintro)
library(tidyverse)
library(knitr)
library(patchwork)
library(Hmisc)       # for errorbars in ggplot
library(kableExtra)
library(graphics)
ggred <- "#F8766D"
ggblue <- "#00BFC4"
ggreen <- "#7CAE00"
ggviolet <- "#C77CFF"
library(scales)
show_col(COL[1:20])
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
library(openintro)
library(tidyverse)
library(knitr)
library(patchwork)
library(kableExtra)
ggred <- "#F8766D"
ggblue <- "#00BFC4"
ggreen <- "#7CAE00"
ggviolet <- "#C77CFF"
data(COL)
library(scales)
show_col(COL[1:20])
#openintro_palettes # Hex for openintro COLs
# Probleme beim rendern: https://stackoverflow.com/questions/66305776/got-knit-issue-with-r, solution:
# tinytex::tlmgr_install("pdfcrop")
# install ghostscript https://www.ghostscript.com/download/gsdnld.html
# Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.54.0/bin/gswin64.exe")
mw_tib <- tibble(
ID = seq(from = 1, to = 5, by = 1),
Freunde = c(1, 2, 3, 3, 4)
)
mw_tib %>%
kbl(caption = "Anzahl Freunde von Statistiklehrern") %>%
kable_classic(full_width = FALSE)
mw_point <- ggplot(mw_tib, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 3) +
theme_grey()
mw_point
mw_tib_est1 <- mw_tib %>%
mutate(
Est = 2,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est1, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 2) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est1 %>%
kbl(caption = "Fehler e und Fehlerquadrate e_sq bei geschätztem Mittelwert = 2") %>%
kable_classic(full_width = FALSE)
#
# mw_tib_est1 %>%
#   summarise(
#     Fehlersumme = sum(e),
#     Fehlerquadratsumme = sum(e_sq)
#   )  %>%
#   kbl() %>%
#   kable_styling(full_width = FALSE)
mw_tib_est2 <- mw_tib %>%
mutate(
Est = 4,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est2, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 3) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est2 <- mw_tib %>%
mutate(
Est = 4,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est2, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 4) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est2 %>%
kbl(caption = "Fehler und Fehlerquadrate bei geschätztem Mittelwert = 3") %>%
kable_classic(full_width = FALSE)
mw_tib_est3 <-  mw_tib %>%
mutate(
Est = 2.6,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est3, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 2.6) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est3 <-  mw_tib %>%
mutate(
Est = 2.6,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est3, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 2.6) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est3 %>%
kbl(caption = "Fehler und Fehlerquadrate beim wahren Mittelwert = 2.6") %>%
kable_classic(full_width = FALSE)
# summarise(mw_tib_est3, sum = sum(e_sq))
mw_tib_est3 <-  mw_tib %>%
mutate(
Est = 2.6,
e = Freunde - Est,
e_sq = e^2
)
ggplot(mw_tib_est3, aes(x = ID, y = Freunde)) +
geom_point(color = "steelblue", size = 4) +
theme_grey() +
geom_hline(yintercept = 2.6) +
geom_segment(aes(xend = ID, yend = Est), color = "orange", size = 1)
mw_tib_est3 %>%
kbl(caption = "Fehler und Fehlerquadrate beim wahren Mittelwert = 2.6") %>%
kable_classic(full_width = FALSE)
# summarise(mw_tib_est3, sum = sum(e_sq))
est_b0 <- seq(from = 0, to = 5.2, by = .1)
ssq <- vector()
mw_tib_est <- mw_tib
for (i in 1:length(est_b0)){
mw_tib_est$b0 <- est_b0[i]
mw_tib_est$sq <- (mw_tib_est$Freunde - mw_tib_est$b0)^2
ssq[i] <- sum(mw_tib_est$sq)
}
ssq_tib <- tibble(
x = est_b0,
y = ssq
)
ggplot(ssq_tib, aes(x = x, y = y)) +
geom_line(color = "orange") +
geom_point(color = "orange") +
coord_cartesian(ylim = c(0, 40)) +
#geom_vline(xintercept = mean(mw_tib$Freunde)) +
labs(x = "Schätzer für den Mittelwert", y = "Fehlerquadratsumme") +
geom_segment(x = 2.6, xend = 2.6, y = 0, yend = min(ssq_tib$y),
color = COL[4],
arrow = arrow(length = unit(0.3, "cm"), type = "closed")) +
geom_segment(x = 2.6, xend = 0, y = 5.2, yend = 5.2, color = COL[4],
arrow = arrow(length = unit(0.3, "cm"), type = "closed")) +
geom_text(x = 2.9, y = 3, label = "2.6", color = COL[4], size = 4) +
geom_text(x = 0.2, y = 7, label = "5.2", color = COL[4], size = 4) +
theme_grey()
set.seed(2)
data <- tibble(
set = c(rep("SP1", 20), rep("SP2", 20)),
x = c(rnorm(20, mean = 0, sd = 0.2), rnorm(20, mean = 0, sd = 1)),
y = c(rep(1, 20), rep(2, 20))
)
ggplot(data, aes(x = x, y = y, color = set)) +
geom_point(size = 3, alpha = .6) +
theme_minimal() +
ylim(0, 3) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
geom_vline(xintercept = 0)
# data %>%
#   group_by(set) %>%
#   summarise(
#     M = mean(x),
#     s = sd(x)
#   )
